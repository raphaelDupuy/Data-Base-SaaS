permissions:
    Un groupe a accès aux tables Licence et Utilisateur. Il a juste la permission de les voir. 

    Un utilisateur a accès aux tables Ticket, Licence et Groupe. Il a la permission de modifier groupe et de voir Licence et Ticket. 

    Un membre du support a accès aux tables Ticket, Licence. Il a la permission de modifier Ticket.

triggers done:
    AchatLicenceGroupeDoublon   /   SuppressionGroupe
    AchatLicenceUtilisateurDoublon   /   ReductionMensuelleUtilisateur

Diff Licence Entreprise / Particulier
Ajouter Le prix dans AchatGroupe et AchatUtilisateur
Changement de la durée des licences en nombre de jours

-- Quelle est la licence la plus vendue ? -> pas le max mais la liste entière
-- Quels logiciels ont été modifiés le plus suite à des Tickets ? - modifier ticket: rajouter la licence sur laquelle l'objet porte, (e.g. en début d'objet)

---------------------------------

Déplacement de toutes les requêtes existantes à la fin.
Ajout de toutes les requêtes indiquées dans le doc. (il y en a 2 qui ne marchent pas encore WIP)

Création des Vues et Triggers [non testé]

---------------------------------

- Ajout de La date pour clé primaire dans achat_utilisateur, achat_groupe et Gère
- Ajout de la version pour la clé primaire dans Modifie

- Correction de données {
    - Modif de "INSERT INTO AchatUtilisateur VALUES (10, 5, '30-feb-2024');" Pour 29-feb-2024
    - Modif de "INSERT INTO Modifie VALUES (3, 3, '30-feb-2024', '0.3');" Pour 29-feb-2024
    - Modif de "INSERT INTO Modifie VALUES (12, 3, '30-feb-2025', '0.9');" Pour 29-feb-2024
    - Modif de "INSERT INTO Modifie VALUES (12, 3, '29-feb-2025', '0.9');" Pour 28-feb-2025
    - Modif de "INSERT INTO Gère VALUES (2, 3, '30-feb-2024');" Pour 29-feb-2024
    - Modif de "INSERT INTO Gère VALUES (5, 1, '30-feb-2025');" Pour 28-feb-2025
}




-----------------
au cas où
-- Trigger 5 : Un groupe peut acheter une licence plus chère que celle qu'il a déjà, cela lui donne une réduction du prix de la licence - le prix de sa licence actuelle divisée par le nombre de jours qu'il a utilisé.
CREATE OR REPLACE TRIGGER GroupeUpgrade
BEFORE INSERT ON AchatGroupe
FOR EACH ROW
DECLARE
    prix_licence_actuelle NUMBER;
    jours_restants NUMBER;
    reduction NUMBER;
BEGIN
    -- Vérifier si une licence existe pour le groupe
    SELECT COUNT(*)
    INTO prix_licence_actuelle
    FROM AchatGroupe ag
    WHERE ag.id_groupe = :NEW.id_groupe;
	DBMS_OUTPUT.PUT_LINE('Début');

    -- Si une licence existe pour le groupe
    IF prix_licence_actuelle > 0 THEN
        -- Récupérer le prix de la licence actuelle du groupe
        DBMS_OUTPUT.PUT_LINE('licence présente');
        SELECT l.Prix 
        INTO prix_licence_actuelle
        FROM AchatGroupe ag
        JOIN Licence l ON ag.id_licence = l.id_licence
        WHERE ag.id_groupe = :NEW.id_groupe;


        -- Calculer les jours restants dans la période de la licence actuelle
        SELECT (l.durée - (SYSDATE - ag.date_achat)) 
        INTO jours_restants
        FROM AchatGroupe ag
        JOIN Licence l ON ag.id_licence = l.id_licence
        WHERE ag.id_groupe = :NEW.id_groupe;

        -- Calculer la réduction basée sur les jours restants
        IF jours_restants > 0 THEN
            reduction := prix_licence_actuelle / jours_restants;

            -- Utilisation de l'instruction UPDATE pour modifier les données dans une autre table
            UPDATE Licence
            SET Prix = Prix - reduction
            WHERE id_licence = :NEW.id_licence;
        END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Aucune licence présente');
	END IF;
END;
